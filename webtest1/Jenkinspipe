@Library("webtestlib") _
pipeline{
  agent{label "slave-linux"}
    stages{
      stage("Git checkout"){
            steps{
                     git credentialsId: 'github-creds', url: 'https://github.com/greeshmagit/webtest1.git' 
                 }
        }
       stage("Maven build"){
           steps{
                   sh 'mvn -f webtest1/pom.xml clean package'
            
                }
        }
         /*stage("nexus artifact"){
                  steps{
                         script{
                         def mavenPom = readMavenPom file:'webtest1/pom.xml'
                         def nexusRepoName = mavenPom.version.endsWith("SNAPSHOT") ? "mvn-web-snapshot" : "mvn-web-nex"
                         nexusArtifactUploader artifacts: [[artifactId: 'webtest', classifier: '', file: 'webtest1/target/${mavenPom.version}.war', type: 'war']],
                         credentialsId: 'nexus',
                         groupId: 'com.greeshma',
                         nexusUrl: '172.31.15.210:8081', 
                         nexusVersion: 'nexus3', 
                         protocol: 'http',
                         repository: nexusRepoName, 
                         version: '${mavenPom.version}'
                       }
                    }
              }*/
              stage("Docker build"){
              steps{
                           sh "docker build -t pgreeshma/webtest:v1 -f webtest1/Dockerfile ."
                   }
          }
          stage("Docker push to nexus"){
               steps{              
                         /* docker push to docker hub*/
                        withCredentials([usernamePassword(credentialsId: 'dockerhub', passwordVariable: 'pwd', usernameVariable: 'user')]) {
                          sh "docker login -u ${user} -p ${pwd}"
                          sh "docker push pgreeshma/webtest:v1"
                        }
                   }
          }
          stage("docker deploy dev"){
               steps{
                           sshagent(['tomcat']){
                           
                                /*from dockerhub repo*/
                               sh "ssh -o StrictHostkeyChecking=no ec2-user@172.31.32.18 docker run -d -p 8080:8080 --name tomcat pgreeshma/webtest:v1"
                         }       
                    }
          }
              
            /*stage("deploy to tomcat"){
        
            steps{
                    tomcatdeploy('ec2-user','172.31.1.31','tomcat')
               
               }
         }*/
       }
  }
                      
